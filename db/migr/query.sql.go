// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package migr

import (
	"context"
)

const createDestination = `-- name: CreateDestination :exec
INSERT INTO destinations (destination_name, destination_type, destination_description, config)
VALUES (?, ?, ?, ?)
`

type CreateDestinationParams struct {
	DestinationName        string
	DestinationType        string
	DestinationDescription string
	Config                 []byte
}

func (q *Queries) CreateDestination(ctx context.Context, arg CreateDestinationParams) error {
	_, err := q.db.ExecContext(ctx, createDestination,
		arg.DestinationName,
		arg.DestinationType,
		arg.DestinationDescription,
		arg.Config,
	)
	return err
}

const createPipeline = `-- name: CreatePipeline :exec
INSERT INTO pipelines (source_id, destination_id)
VALUES (?, ?)
`

type CreatePipelineParams struct {
	SourceID      int64
	DestinationID int64
}

func (q *Queries) CreatePipeline(ctx context.Context, arg CreatePipelineParams) error {
	_, err := q.db.ExecContext(ctx, createPipeline, arg.SourceID, arg.DestinationID)
	return err
}

const createSource = `-- name: CreateSource :exec
INSERT INTO sources (source_name, source_type, source_description, config)
VALUES (?, ?, ?, ?)
`

type CreateSourceParams struct {
	SourceName        string
	SourceType        string
	SourceDescription string
	Config            []byte
}

func (q *Queries) CreateSource(ctx context.Context, arg CreateSourceParams) error {
	_, err := q.db.ExecContext(ctx, createSource,
		arg.SourceName,
		arg.SourceType,
		arg.SourceDescription,
		arg.Config,
	)
	return err
}

const getAllDestinations = `-- name: GetAllDestinations :many
SELECT id, destination_name, destination_type, destination_description, config, updated_at FROM destinations
`

func (q *Queries) GetAllDestinations(ctx context.Context) ([]Destination, error) {
	rows, err := q.db.QueryContext(ctx, getAllDestinations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Destination
	for rows.Next() {
		var i Destination
		if err := rows.Scan(
			&i.ID,
			&i.DestinationName,
			&i.DestinationType,
			&i.DestinationDescription,
			&i.Config,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPipelines = `-- name: GetAllPipelines :many
SELECT id, source_id, destination_id FROM pipelines
`

func (q *Queries) GetAllPipelines(ctx context.Context) ([]Pipeline, error) {
	rows, err := q.db.QueryContext(ctx, getAllPipelines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pipeline
	for rows.Next() {
		var i Pipeline
		if err := rows.Scan(&i.ID, &i.SourceID, &i.DestinationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSources = `-- name: GetAllSources :many
SELECT id, source_name, source_type, source_description, config, updated_at FROM sources
`

func (q *Queries) GetAllSources(ctx context.Context) ([]Source, error) {
	rows, err := q.db.QueryContext(ctx, getAllSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.SourceName,
			&i.SourceType,
			&i.SourceDescription,
			&i.Config,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDestinationById = `-- name: GetDestinationById :one
SELECT id, destination_name, destination_type, destination_description, config, updated_at FROM destinations
WHERE id = ?
`

func (q *Queries) GetDestinationById(ctx context.Context, id int64) (Destination, error) {
	row := q.db.QueryRowContext(ctx, getDestinationById, id)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.DestinationName,
		&i.DestinationType,
		&i.DestinationDescription,
		&i.Config,
		&i.UpdatedAt,
	)
	return i, err
}

const getPipelineById = `-- name: GetPipelineById :one
SELECT id, source_id, destination_id FROM pipelines
WHERE id = ?
`

func (q *Queries) GetPipelineById(ctx context.Context, id int64) (Pipeline, error) {
	row := q.db.QueryRowContext(ctx, getPipelineById, id)
	var i Pipeline
	err := row.Scan(&i.ID, &i.SourceID, &i.DestinationID)
	return i, err
}

const getSourceById = `-- name: GetSourceById :one
SELECT id, source_name, source_type, source_description, config, updated_at FROM sources
WHERE id = ?
`

func (q *Queries) GetSourceById(ctx context.Context, id int64) (Source, error) {
	row := q.db.QueryRowContext(ctx, getSourceById, id)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.SourceName,
		&i.SourceType,
		&i.SourceDescription,
		&i.Config,
		&i.UpdatedAt,
	)
	return i, err
}
